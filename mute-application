#!/usr/bin/env python

import subprocess as sp
import re
import argparse
import sys

################################################################################
## argument handling ###########################################################
################################################################################

argparser = argparse.ArgumentParser()
argparser.add_argument("-a", "--appname", help="select sink inputs to operate on by application name")
argparser.add_argument("-b", "--binname", help="select sink inputs to operate on by binary")
argparser.add_argument("-m", "--mute", action="store_true", help="mute the specified sink inputs")
argparser.add_argument("-u", "--unmute", action="store_true", help="unmute the specified sink inputs")
argparser.add_argument("-t", "--toggle", action="store_true", help="toggle the muted state of the specified sink inputs. This is the default action if none is specified.")
argparser.add_argument("-v", "--verbose", action="store_true", help="verbose mode: print debugging information")
args = argparser.parse_args()

appname_regex = ".*"
binname_regex = ".*"
if args.appname:
    appname_regex = args.appname
if args.binname:
    binname_regex = args.binname

state_set_count = sum([1 if x else 0 for x in (args.mute, args.unmute, args.toggle)])
if (state_set_count > 1):
    print("Please only specify a single action.")
    sys.exit(0)
    
################################################################################
## set up regexes for parsing the output of the pulseaudio stuff ###############
################################################################################

index_compiled = re.compile('.*index: (\d*)')
muted_compiled = re.compile('.*muted: (yes|no)')
appname_compiled = re.compile('.*application\\.name = "(.*' + appname_regex + '.*)"', re.IGNORECASE)
binname_compiled = re.compile('.*application\\.process\\.binary = "(.*' + binname_regex + '.*)"', re.IGNORECASE)
    
################################################################################
## get pulseaudio data, parse it, and actually do stuff ########################
################################################################################

pacmd_data = sp.check_output(['/usr/bin/pacmd', 'list-sink-inputs']).decode("utf-8")

index = None
appname = None
binname = None
muted = None
for s in pacmd_data.splitlines():
    index_match = index_compiled.match(s)
    appname_match = appname_compiled.match(s)
    binname_match = binname_compiled.match(s)
    muted_match = muted_compiled.match(s)
    if index_match:
        # every time we get a new index, that means we've run into a
        # new sink input and we should throw away whatever we got from
        # the last one
        appname = None
        binname = None
        index = int(index_match.group(1))
        if args.verbose: print("Processing sink input: {0}".format(index))
    if appname_match:
        appname = appname_match.group(1)
        if args.verbose: print("  Found an application: {0}".format(appname))
    if binname_match:
        binname = binname_match.group(1)
        if args.verbose: print("  Found a binary: {0}".format(binname))
    if muted_match:
        muted = muted_match.group(1) == "yes"

    # this goes off as soon as we get everything we need
    if index and appname and binname and (muted != None):
        if args.verbose: print("  Acting on sink input {0} (name: {1}, binary: {2})".format(index, appname, binname))
        # figure out what we want to do exactly
        new_mute_status = "yes"
        if args.mute: new_mute_status = "yes"
        if args.unmute: new_mute_status = "no"
        if args.toggle or state_set_count == 0:
            new_mute_status = "no" if muted else "yes"

        # construct our command
        command = ['pactl', 'set-sink-input-mute', str(index), new_mute_status]
        if args.verbose:
            print("  Sending the following command: ")
            sys.stdout.write("  ")
            print(command)
        
        # and send it
        sp.call(command)

        # once we do something, erase what we have so it doesn't bleed
        # over to the next sink input
        appname = None
        binname = None
        
